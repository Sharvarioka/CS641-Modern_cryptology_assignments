Q1 Teamname
0 Points
CodeNymro

Q2 Commands
10 Points
List the commands used in the game to reach the ciphertext.
go, jump, dive, back, dive, pull, back, back(level3), go, wave(free the sprit), back(level4), read

Q3 Cryptosystem
5 Points
What cryptosystem was used at this level? Please be precise.
6 round DES

Q4 Analysis
80 Points
Knowing which cryptosystem has been used at this level, give a detailed description of the cryptanalysis used to figure out the password. (Explain in less than 150 lines and use Latex wherever required. If your solution is not readable, you will lose marks. If necessary, the file upload option in this question must be used TO SHARE IMAGES ONLY.)

1. We are at the Magic screen and whatever we whisper we will get a corresponding code for it. These are our plaintext and ciphertext pairs. The Crypto-system used here is either 4-round,6-round or 10-round DES. As 4-round was already discussed in class we had the intuition that it might be 6-round. So we decided to go with 6-round DES.
    
2. It is also given that two letters were for one byte. The size of DES is 64 bits or 8 bytes. so if 2 letters represent 1 byte, the block size will be 16 letters representing a block.
    
3. We tried to get multiple cipher texts corresponding to some inputs and there we observed that the encrypted text generated consists of letters from 'f' to 'u'. This can be surely inferred by doing a frequency analysis of the cipher text(generated by the server). We used a dictionary in order to map these 'f' to 'u' characters to '0000' to '1111' binary strings. We ran run.sh to generate approximately 1 lac pairs of plaintext and corresponding encrypted text.

4. We used differential iterative characteristic of 6 - round DES  '405c0000 04000000' to break the code, which gives differential '00540000 04000000' after 4 rounds with a probability of 0.000381.    
    
5. First we have to reverse the final permutation of a right half-block of output and XOR of alternate pairs of the sixth round. For this we used 3_Differential.py. The right half output of round 5 is the same as the left half output. Then, we expand the right half output of around 5 to get the differential input of the S-Boxes and after key XORing,  it doesnâ€™t get changed due to the property of XOR and storing it into XS_inp_14.txt. To get S-boxes' output differentials we perform inverse permutation on the right half and store them in XS_out_14.txt. For every two entries from the output of the sixth round we extract the left half of the first output, expand and store it to XExp_out_14.txt.  XExp_out_14.txt contains the value before XORing of the key and after the Expansion box of the sixth round.
    
    
6. In DES_SBOX_Phase.py for every value in XS_inp_14.txt  we generate the input pairs for each S-box so that the XOR of these pairs is the same as that iterations XS_inp_14.txt value. Now by considering the corresponding pairs in XS_inp_14.txt and if XOR of output pair is equal to that of XS_out.txt value, we increment the counter for the corresponding key of XExp_out_14.txt. This loop assigns the frequency and we consider only the highly probable ones. Comparing the maximum and mean frequency of the S_Box, we lead to the conclusion that we cannot get the key from S_Boxes S3 and S4. So we get only 36 bits(6 S-Boxes each providing 6 bits) out of 56 bits.
    
7. Following key consisting of some missing values is generated using DES_SBOX_Phase.py  :[-1, -1, 1, -1, -1, 1, -1, -1, -1, 1, 0, -1, 1, -1, 1, 0, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, 0, 0, 1, 1, 1, 0, 0, -1, 0, 1, 0, 1, 0, 1, 1, 1, -1, 1, 0, -1, 1, 1, 1, 1, -1, 0, 0, 1]
    
8. We generate 2^20 possible keys and then apply a brute force algorithm in order to generate the required key. In order to check whether the key is correct, we used Plain = ffffffffffffffff whose corresponding ciphertext = fkomknkttnoiuksq. The decimal conversion for ciphertext is [5,151,88,94,232,147,245,219]. We get this decimal conversion by using decimal_to_dec.py. This plain and ciphertext pair is used to calculate the actual key in 6_desbrute.cpp. 
    
9.  The obtained key is then used on left and right half of password - 'tjthnnltipkpjfjkjlshhukoolthfkhf' for which left half(in decimal) is {228,226,136,110,58,90,64,69}; and right  half(in decimal)is {70,210,47,89,150,226,5,32};

10. 7_DES.cpp provides the solution as 116 108 119 117 106 100 101 112 105 117 48 48 48 48 48 48. Now we tried to map it with 'f' to 'u' mapping but that did not work. We can observe that these values are below 127. Hence we convert them into  corresponding ASCII codes which gives us the password as  tlwujdepiu.
No files uploaded
Q5 Password
5 Points
What was the final command used to clear this level?

tlwujdepiu
