Q1 Teamname
0 Points
CodeNymro
Q2 Commands
5 Points
List the commands used in the game to reach the ciphertext.

go,wave,dive,go,read
Q3 Analysis
50 Points
Give a detailed description of the cryptanalysis used to figure out the password. (Explain in less than 100 lines and use Latex wherever required. If your solution is not readable, you will lose marks. If necessary, the file upload option in this question must be used TO SHARE IMAGES ONLY.)


1. The cryptosystem used at this level is: EAEAE. The encrypted password we got from the game is : jgjliljpglmfkrijmiirmrlfllitgrgh.

2. We tried to get multiple cipher texts corresponding to some inputs and there we observed that the encrypted text generated consists of letters from 'f' to 'u'. This can be surely inferred by doing a frequency analysis of the cipher text(generated by the server). We used a dictionary in order to map these 'f' to 'u' characters to '0000' to '1111' binary strings. 

3. Also we observed that whenever we type 'f', ciphertext retains that 'f' in itself. So we concluded that 'f' is used as padding like 0.  

4.  As the screen says there is a  block of size 8 bytes as 8 x 1 vector over F_{128} so we try to apply the combinations of 'ff' to 'mu' considering MSBs for any letter will be f(considered to be 0). 

5. We iterated the above described procedure for rest of the bytes and noticed a pattern that whenever the i^{th}i 
th
   byte of input, it changes every byte occurring after i^{th}i 
th
  byte. We used 1_Input_Generation.py to get these input plaintext and corresponding ciphertext pairs. and 2_out_cipheronly.py is used to clean the output to store in out_cipher.txt.

6. This gave us a feeling that transformation matrix used here is a lower triangular matrix.

7. Screen says that the E box had elements between 1 ad 126 and matrix A has elements from F_{128}F 
128
​	
  which was observed to be lower triangular.

8.  As the input format we have chosen, at a time only a single byte is non-zero and as the matrix is lower triangular then, if x is the value of non-zero input block(say i), the corre-
    sponding block of output has the value:
 {(a_{i,i} {(a_{i,i} \times x^{e_i} )}^{e_i} )}^{e_i} (a 
i,i
​	
 (a 
i,i
​	
 ×x 
e 
i
​	
 
 ) 
e 
i
​	
 
 ) 
e 
i
​	
 
        -----------------(1)

9. As the generator of field is given as x^7 + x + 1x 
7
 +x+1, we performed field operation using   3_Decrypt_Cipher.py.
Iterating over values of a_{i,i}a 
i,i
​	
  (from 0 to 127)
and e_ie 
i
​	
  (from 1 to 126), we got following possible tuples of values for each block.

| Block No. | Possible a_{i,i}​	| Possible corresponding e_{i}|	
| ----------- | ----------- | ----------- |
| 0 | [84, 46, 96]  | [24, 28, 75] |
| 1 | [47, 70, 70] | [1, 19, 107] |
| 2 | [108, 43, 86] | [29, 43, 55] |
| 3 | [77, 12, 87] | [66, 77, 111] |
| 4 | [5, 31, 112]  | [78, 85, 91] |
| 5 | [51, 11, 53]  | [17, 41, 69] | 
| 6 | [27, 66, 70] | [22, 37, 68] | 
| 7 | [38, 33, 53] | [24, 28, 75]
    
10. In order to choose one value out of 3 values shown in above table for a_{i,i} and e_i, we use some cipher-text and plaintext pairs such that it gives element between 0 to 127 and holding equation (1).
|Block No. | Final a_{i,i}​ | Final corresponding e_{i} |
| ----------- | ----------- | ----------- |
| 0 | [84]  | [24] |
| 1 | [70] | [107] |
|2  | [43] | [43] |  
| 3 | [12] | [77] |
| 4 | [112]| [91] |
| 5 | [11] | [41] |
|6  | [27] | [22] |
| 7 | [38] | [24] |

11. From 7^{th}7 
th
  row of linear transformation matrix we observed that when we change the 7^{th}7 
th
  byte in the input we did not get any changes in 8^{th}8 
th
  byte of corresponding output. So, we applied the brute force to get the corresponding element of the matrix.

12. Hence the linear transformation matrix is:
Linear matrix ^T =[[84, 118, 21, 126, 97, 24, 20, 104], 
                 [0, 70, 27, 23, 60, 44, 125, 13], 
                 [0, 0, 43, 13, 1, 29, 15, 72], 
                 [0, 0, 0, 12, 118, 53, 98, 27], 
                 [0, 0, 0, 0, 112, 99, 1, 20], 
                 [0, 0, 0, 0, 0, 11, 95, 67], 
                 [0, 0, 0, 0, 0, 0, 27, 83], 
                 [0, 0, 0, 0, 0, 0, 0, 38]]

Exponent matrix = [24 107 43 77 91 41 22 24]

13.  In order to obtain the decrypted password, we first broke the password into two halves and applied EAEAE function which looped over all the blocks and checks if the output returned is same as the current password block.The password obtained was xltscnoufe000000 and we ignored the padded 0s.

14. The final password is : xltscnoufe

Q4 Password
5 Points
What was the final command used to clear this level?
xltscnoufe